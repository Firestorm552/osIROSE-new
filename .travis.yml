dist: focal
language: cpp
os: linux

env:
  global:
  - coverity_scan_script_test_mode=true
  - coverity_scan_run_condition='"$TRAVIS_OS_NAME" != osx -a "$BUILD_TYPE" = Release'
  #Cov scan email and token
  - secure: "s3nV+bCZyiJFhubZgq1SjP+6DUQgT0fzeTTvaPytYTvFuyYWrTzMPdqdhLXc5MZ3mQ/3PMvn3ZjU0AlT7YypLjyGY0LM8tFD4HD608DWR3qRDnlPKsB4nTCQVCp30FhlFSzlVt4E6ZZCtbbu3X92Q+B4UGjGBnX0T4ePsJMk+CfFKGxbF6Hyo6rThXTfRvGWQtu3pI5pmHksyDyCTtX/m5ljslVy84WTLWREX6m7GSeVu3MB+D9hWR+SGkxbjzxtwSfGmUp2893/xxac+BJNTXqJfKDJA7y98/jB65VASfos3T3Bkdq4nl1e5D4jAmcWE6ZsPpjvem4iZGUZwYbdUNhCk2iGDUjnJYU18z+3R+A4LChmXJlSmtG9AcLU+MT1rJeTQCUqq9pBXAG+keOdBu4J+CvBS5KrhmbG6pXHfUMY0UAqcAHdkgZo26JNnm9kIGcz+IrFOPERUe/naFM+27QGDZ0RfYkbWGbiqaTQ2SptMIOn7/zEqkWWOoT4CImtbSjjOETStIPzIWzR/I+bWFuNL/RL7K1UimqrfQFYG/W1WWXi8ZYqSE+DJX/ejWAytvvq6FWNhXOLe7+0fc/ZzhFTQqusdg0G3wNXKLSNVzuC1MyYXwoJEw33397GsPaK2E5tKlwi12txun5uWAzagHuYVTuHNHKt4qV8+e3AIjw="
  - secure: "JuSus/BqBJ2RTj7oJ3tn6dfFqnNWmWdM6/+PBId8YT52fUJTQp0eLmYbqZhq04OFvCKLgzeiObggfFZk5VOXAB/bfhlQEKSprso6C0WxKzFnftr085rcr5mW2ux+RSWTeE9KT1bpsjtpSrQTOniQhPGD6u704DdIzKuOnSngU8TXRAHFujXtUA0SHU8Oft8OpysaTDVWbFehBemg6BeOssklw2LrScGT3AWm8+qNdyAV+ynko4s8CzdOJqueCNWnkYFQyNtWN67uasveg3j+zgOfstjgyYSEoYh6deCNy8BjmWzX2tUkpzxh7h4w/VlyVjvyMG524UdMDmFZNNo7CMn1/qla6zjli3xDV/kk2Dfzj1JCn2WsesOY8+p4bdYoUU4lR0PuYraEuBAOCiVb3V7VLzU5FyV3clY8+MwifVHvNLxUbyD2ygZfPrS8LQJ/7jJSPeEARUIngvNkY9L8Jr6olw3Xg7DoDHLWAFBMtBi/sZG3CvXDyeIUX8rkh4hY6QlnO/xrql5KxDupsAwqj+rMdhzYeCnyRY6HvqBIoIrpi47uPGutxiIFgjrzwr28eL+XrrkwHfbM+pFDUITdWjm79/EyEPgGsEMM8IxXcpSGNmMDDhpHu1oZE4L3gdKli6hdS5fo6CEDV3x1nvk/SsY52WhEWIT/RwQPl4qL3YQ="
  #coveralls repo token
  - secure: "s8DdaxdWVR3qRBxfxO6UjugB1dWlEnv9KhF1ZUHDhWziPtoecKjCXnJYSB6EOddTPoJXtOdTVW9ThGGCvKQ+vYdGNce+PCWglruANO/lEz/82HWPZkTKbw4WyoDo5GqlFCu1C3gY9dA58ClpGDlX5BNQA81JCJrWKUdR2J0/WW9USPKHxDLGISYKt28nwVjywR8uDnysBJkmmS+53Ge2MSzmOLuEZeysq7iCD6xssPL5UDDb/itNOc4OkvRGtvTnLrMF4c7naFRfbhc7NR1MxKz+eu2DgM9SAnJrh1jnYXWu/1EG8VKQOYR23OwjxSurSRjJxInGZdrSGUB8R38Z35Ndq7RHKRAZvwIPkZqDFCUQ/hkAJlu/4cbz8KPHJMOV0SOFpCztnFCQY619KXn0S0Tos38KthVu2nNSMJu1e1GuQK1dhM+Uh3MCrSChyPmK75IKbM7Jj5OKRqKO4uSnsut3RK91RYF3oB3HdLkznTLYBLnyEWK6Zh56lhoZiJMd/WCL24/U5Pne6VwLDBjaeOH9lEjD6oaUSIDyowVAOte4qVg7WW7OXx2fkK9ySd4X0P5C5JLtWsZ8O+va9LkIxPPCdck3HV+k1EU0tHrLAAkpwO3D9StRdkc7cX+z13aFOZQyKef1wbKyNCYrq6E3SGvlI011+0vN2ZiGKKusGcs="
  - PATH=${TRAVIS_BUILD_DIR}/build/3rdparty/bin:${TRAVIS_BUILD_DIR}/build/3rdparty/usr/bin:${TRAVIS_BUILD_DIR}/build/3rdparty/usr/local/bin:${TRAVIS_BUILD_DIR}/cmake_app/bin:${TRAVIS_BUILD_DIR}/ninja:$HOME/usr/bin:$HOME/usr/local/bin:$PATH
  - GENHTML_PATH=${TRAVIS_BUILD_DIR}/build/3rdparty/usr/local/bin/genhtml
  - LCOV_PATH=${TRAVIS_BUILD_DIR}/build/3rdparty/usr/local/bin/lcov
  - CI_DIRECTORY=${TRAVIS_BUILD_DIR}/cmake/scripts
  - CCACHE_SLOPPINESS="pch_defines,time_macros"
  - PREFIX=${TRAVIS_BUILD_DIR}/build/3rdparty
  - PROCESSOR_ARCH=`uname -p`
  - WITH_CRASH_REPORTS=ON
  - BUILD_TYPE=Release
  - BUILD_JOB_COUNT=4
  - GCOV_EXEC=gcov-8
  - SUITE=tests

#services:
#  mysql

cache:
  pip: true
  ccache: true
  bundler: true
  directories:
  - ${TRAVIS_BUILD_DIR}/build/3rdparty/bin
  - ${TRAVIS_BUILD_DIR}/build/3rdparty/usr
  - ${TRAVIS_BUILD_DIR}/build/3rdparty/lib
  - ${TRAVIS_BUILD_DIR}/build/3rdparty/include
  - ${TRAVIS_BUILD_DIR}/ninja

stages:
  - prepare cache
  - compile
  - test
  - notify

jobs:
  include:
    - &gccinit
      stage: prepare cache
      name: "AMD64 Ubuntu/GCC"
      arch: amd64
      os: linux
      compiler: g++
      if: branch != coverity_scan
      env: CC=gcc-8 CXX=g++-8
      addons:
        apt:
          packages:
          - lcov
          - g++-8
          - libcurl4-openssl-dev
      install:
        - |
          if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
            CMAKE_URL="https://github.com/Kitware/CMake/releases/download/v3.14.5/cmake-3.14.5-Linux-x86_64.tar.gz"
            mkdir -p cmake_app && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C $TRAVIS_BUILD_DIR/cmake_app
          else
            brew upgrade cmake || brew install cmake
          fi
        - cmake --version
        - ccache --version
        - ccache --show-stats
        - bash $CI_DIRECTORY/install-lcov.sh
        - bash $CI_DIRECTORY/install-ninja.sh
        - pip install --user pyparsing
      script: true

    - &clanginit
      stage: prepare cache
      name: "AMD64 Ubuntu/Clang"
      arch: amd64
      os: linux
      compiler: clang++
      if: branch != coverity_scan
      env: CC=clang-7 CXX=clang++-7
      addons:
        apt:
          packages:
          - lcov
          - g++-8
          - clang++-7
          - libcurl4-openssl-dev
      install:
        - |
          if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
            CMAKE_URL="https://github.com/Kitware/CMake/releases/download/v3.14.5/cmake-3.14.5-Linux-x86_64.tar.gz"
            mkdir -p cmake_app && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C $TRAVIS_BUILD_DIR/cmake_app
          else
            brew upgrade cmake || brew install cmake
          fi
        - cmake --version
        - ccache --version
        - ccache --show-stats
        - bash $CI_DIRECTORY/install-lcov.sh
        - bash $CI_DIRECTORY/install-ninja.sh
        - pip install --user pyparsing
      script: true
#----------------------------
#GCC Compile step
    - <<: *gccinit
      stage: compile
      name: "AMD64 G++-8 Debug - Coverage Tests"
      if: branch != coverity_scan
      env: CC=gcc-8 CXX=g++-8
      before_install:
        - export SUITE=coverage
        - export BUILD_TYPE=Debug
#      before_script:
#        - mysql -u root -e "SET PASSWORD FOR 'root'@'localhost' = PASSWORD('')"
#        - mysql --user="root" -e 'create database osirose;'
#        - mysql --user="root" --database="osirose" --password="" < "$TRAVIS_BUILD_DIR/Database/osirose.sql"
      script:
        - cd build
        - cmake -GNinja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DWITH_CRASH_REPORTS=${WITH_CRASH_REPORTS} -DWITH_COVERAGE_REPORTS=ON ..
        - cmake --build . -- -j ${BUILD_JOB_COUNT}
      after_success:
        - cd ${TRAVIS_BUILD_DIR}/build
        - mkdir -p ${TRAVIS_BUILD_DIR}/public
        - cp ${TRAVIS_BUILD_DIR}/build/3rdparty/lib/*.so bin
        - cp lib/*.so bin
        - cd ${TRAVIS_BUILD_DIR}
        - tar -zcvf ${TRAVIS_BUILD_DIR}/public/${TRAVIS_OS_NAME}-${PROCESSOR_ARCH}-${SUITE}-${BUILD_TYPE}.tar.gz build 3rdparty/include ${TRAVIS_BUILD_DIR}/scripts > /dev/null
        - curl --ftp-create-dirs --ftp-pasv --user ${AZG_FTP_USER}:${AZG_FTP_PASS} --upload-file ${TRAVIS_BUILD_DIR}/public/${TRAVIS_OS_NAME}-${PROCESSOR_ARCH}-${SUITE}-${BUILD_TYPE}.tar.gz --url ${AZG_HOST}/success/${TRAVIS_BUILD_NUMBER}/${TRAVIS_OS_NAME}/${TRAVIS_OS_NAME}-${PROCESSOR_ARCH}-${SUITE}-${BUILD_TYPE}.tar.gz

    - <<: *gccinit
      stage: compile
      name: "AMD64 G++-8 Release"
      if: branch != coverity_scan
      env: CC=gcc-8 CXX=g++-8
#      before_script:
#        - mysql -u root -e "SET PASSWORD FOR 'root'@'localhost' = PASSWORD('')"
#        - mysql --user="root" -e 'create database osirose;'
#        - mysql --user="root" --database="osirose" --password="" < "$TRAVIS_BUILD_DIR/Database/osirose.sql"
      script:
        - cd build
        - cmake -GNinja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DWITH_CRASH_REPORTS=${WITH_CRASH_REPORTS} ..
        - cmake --build . -- -j ${BUILD_JOB_COUNT}
      after_script:
        - ctest --output-on-failure
      after_success:
        - cd ${TRAVIS_BUILD_DIR}/build
        - mkdir -p ${TRAVIS_BUILD_DIR}/public
        - cp ${TRAVIS_BUILD_DIR}/build/3rdparty/lib/*.so bin
        - cp lib/*.so bin
        - cd ${TRAVIS_BUILD_DIR}/build/bin/symbols
        - curl --data-binary @LoginServer.sym "$BACKTRACE_URL/post?format=symbols&token=$BACKTRACE_TOKEN"
        - curl --data-binary @CharServer.sym "$BACKTRACE_URL/post?format=symbols&token=$BACKTRACE_TOKEN"
        - curl --data-binary @MapServer.sym "$BACKTRACE_URL/post?format=symbols&token=$BACKTRACE_TOKEN"
        - curl --data-binary @NodeServer.sym "$BACKTRACE_URL/post?format=symbols&token=$BACKTRACE_TOKEN"
        - rm *.sym
        - tar -zcvf ${TRAVIS_BUILD_DIR}/public/${TRAVIS_OS_NAME}-${PROCESSOR_ARCH}-${SUITE}-${BUILD_TYPE}.tar.gz ${TRAVIS_BUILD_DIR}/build/bin ${TRAVIS_BUILD_DIR}/scripts > /dev/null
#----------------------------
#Clang compile step
    - <<: *clanginit
      stage: compile
      name: "AMD64 Clang++-7 Debug"
      if: branch != coverity_scan
      env: CC=clang-7 CXX=clang++-7
      before_install:
        - export GCOV_PATH=$CI_DIRECTORY/llvm-gcov.sh
        - export BUILD_TYPE=Debug
      script:
        - cd build
        - cmake -GNinja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DWITH_CRASH_REPORTS=${WITH_CRASH_REPORTS} -DWITH_COVERAGE_REPORTS=ON ..
        - cmake --build . -- -j ${BUILD_JOB_COUNT}

    - <<: *clanginit
      stage: compile
      name: "AMD64 Clang++-7 Release"
      if: branch != coverity_scan
      env: CC=clang-7 CXX=clang++-7
      before_install:
        - export GCOV_PATH=$CI_DIRECTORY/llvm-gcov.sh
      script:
        - cd build
        - cmake -GNinja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DWITH_CRASH_REPORTS=${WITH_CRASH_REPORTS} ..
        - cmake --build . -- -j ${BUILD_JOB_COUNT}
#----------------------------
#Coverity scan stoof
    - &covinit
      stage: compile
      name: "AMD64 G++-8 Coverity Scan Release"
      arch: amd64
      if: branch = coverity_scan
      env: CC=gcc-8 CXX=g++-8
      before_install:
        - export COV_CONFIG=${TRAVIS_BUILD_DIR}/cov_compiler.xml
      install:
        - |
          if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
            CMAKE_URL="https://github.com/Kitware/CMake/releases/download/v3.14.5/cmake-3.14.5-Linux-x86_64.tar.gz"
            mkdir -p cmake_app && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C $TRAVIS_BUILD_DIR/cmake_app
          else
            brew upgrade cmake || brew install cmake
          fi
        - cmake --version
        - bash $CI_DIRECTORY/install-lcov.sh
        - pip install --user pyparsing
        - export CC=gcc-8 CXX=g++-8
        - export GCOV_EXEC=gcov-8
      script: true
      addons:
        apt:
          packages:
          - lcov
          - g++-8
          - libcurl4-openssl-dev
        coverity_scan:
          build_script_url: https://raw.githubusercontent.com/$TRAVIS_REPO_SLUG/$TRAVIS_BRANCH/.travis-coverity-scan-build.sh
          project:
            name: "$TRAVIS_REPO_SLUG"
            version: 0.3
          notification_email: $COVERITY_SCAN_NOTIFICATION_EMAIL
          build_command_prepend: "mkdir -p build && cd build && cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DWITH_CRASH_REPORTS=OFF -DFORCE_SYS_DEPS=ON .. && make lua -j ${BUILD_JOB_COUNT} && make sqlite3 date sqlpp11 sqlpp11-connector-mysql sqlpp11-connector-sqlite3 -j ${BUILD_JOB_COUNT}"
          build_command: "cmake --build . -- -j ${BUILD_JOB_COUNT}"
          branch_pattern: coverity_scan
      after_failure:
        #- cat /home/travis/build/dev-osrose/osIROSE-new/build/cov-int/build-log.txt
        - cat /home/travis/build/dev-osrose/osIROSE-new/build/cov-int/scm_log.txt
        - $CI_DIRECTORY/notify-discord.sh failure $DISCORD_WEBHOOK_URL

    - <<: *covinit
      stage: compile
      name: "AMD64 G++-8 Coverity Scan Release CRON"
      if: (type = cron AND branch = trunk)
      addons:
        coverity_scan:
          build_script_url: https://raw.githubusercontent.com/$TRAVIS_REPO_SLUG/$TRAVIS_BRANCH/.travis-coverity-scan-build.sh
          project:
            name: "$TRAVIS_REPO_SLUG"
            version: 0.3
          notification_email: $COVERITY_SCAN_NOTIFICATION_EMAIL
          build_command_prepend: "mkdir -p build && cd build && cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DWITH_CRASH_REPORTS=OFF -DFORCE_SYS_DEPS=ON .. && make lua -j ${BUILD_JOB_COUNT} && make sqlite3 date sqlpp11 sqlpp11-connector-mysql sqlpp11-connector-sqlite3 -j ${BUILD_JOB_COUNT}"
          build_command: "cmake --build . -- -j ${BUILD_JOB_COUNT}"
          branch_pattern: trunk

#Notify discord and everyone else
    - &notify
      stage: notify
      cache: false
      script: true
      git:
        submodules: false
      after_success:
        - $CI_DIRECTORY/notify-discord.sh success $DISCORD_WEBHOOK_URL

after_failure:
  - $CI_DIRECTORY/notify-discord.sh failure $DISCORD_WEBHOOK_URL

deploy:
  provider: releases
  token:
    secure: u0DKBv0ZaE8+J/WxJTyEyY+PVgtk8ymuOfRN3IxglSEG+JFgGhiUQLD9lZ0S5n3lQZ5b8MPmtbnwuX1XY2PtnWKrb+5OVRR5yvAcR9P0pY1SxtMR4uATVxdFCXim347xn98trRuIomACrLHD/D75HN46hAfPc/gGektguuMr6b2hph2bgGZ2Hd3EPSZq4Q2gAVwHislJLyLf8tX6lvwlIqb3mpaZPRQNBma2AhTTRQOq8u1Fkz9sLV5VDI3AdhfE//+cVCzPX1I2piLKDqZ2MNQNwlWwLaKUy33SDFIUndu6QQhFsL1XDUIXsxhTqu8Y4Qbs1Ksx7iCh1oAPIot7wdI1hJna51vKtMh9tK6r64QNc8GkbEuH7aWbSS0o0w3vx8hzvuDRzj0+gNTDCkEadvPSLExpRGgg8jZSz0C70VQzi+obG6cR9CGkUETlvUmLMaqd6H+WAQwRPUof/cnZUZNW/NAYTR6GSvcTgJOyZy/P0Q5vzsat3LhvpshC9IUzOM3v3GDcQ1s6JL3PRz8dKTzz4et9FpVkn77YW8h7Dgv3Ygag/cAN0dsV4Ds77HImacDSE6BiNm5uenE4CEQeUbWq4PLJl/PDu5V9z9QbCTHKP2STNMg3vCPjg0Sl6RGG+8s5u2LfuZeRQue19UDjnYMsifkxRy+zKr+FYW29c10=
  file: "${TRAVIS_BUILD_DIR}/public/${TRAVIS_OS_NAME}-${PROCESSOR_ARCH}-${SUITE}-${BUILD_TYPE}.tar.gz"
  on:
    repo: dev-osrose/osIROSE-new
    condition: $CXX = "g++-8" && $BUILD_TYPE = "Release"
    branch: trunk
    tags: true
